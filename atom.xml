<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>plgy_y</title>
  
  <subtitle>plgy_y的Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-19T08:28:33.843Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yangyuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式</title>
    <link href="http://yoursite.com/2018/10/19/DesignPattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/10/19/DesignPattern/设计模式/</id>
    <published>2018-10-19T08:08:41.000Z</published>
    <updated>2018-10-19T08:28:33.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h2><h4 id="设计模式分为三大类："><a href="#设计模式分为三大类：" class="headerlink" title="设计模式分为三大类："></a>设计模式分为三大类：</h4><ul><li>创建型模式，共五种：<ul><li>工厂方法模式，抽象工厂模式，单例模式，建造者模式，原型模式</li></ul></li><li>结构型模式，共七种：<ul><li>适配器模式，装饰器模式，代理模式，外观模式，桥接模式，组合模式，享元模式</li></ul></li><li>行为型模式，共十一种：<ul><li>策略模式，模板方法模式，观察者模式，迭代子模式，责任链模式，命令模式，备忘录模式，状态模式，访问者模式，<br>中介者模式，解释器模式</li></ul></li></ul><p><img src="/2018/10/19/DesignPattern/设计模式/images/designpatternbg.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;设计模式的分类&quot;&gt;&lt;a href=&quot;#设计模式的分类&quot; class=&quot;headerlink&quot; title=&quot;设计模式的分类&quot;&gt;&lt;/a&gt;设计模式的分类&lt;/h2&gt;&lt;h4 id=&quot;设计模式分为三大类：&quot;&gt;&lt;a href=&quot;#设计模式分为三大类：&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>幽静的小路</title>
    <link href="http://yoursite.com/2018/10/17/Journey/%E5%B9%BD%E9%9D%99%E7%9A%84%E5%B0%8F%E8%B7%AF/"/>
    <id>http://yoursite.com/2018/10/17/Journey/幽静的小路/</id>
    <published>2018-10-17T10:05:34.000Z</published>
    <updated>2018-10-19T03:03:57.270Z</updated>
    
    <content type="html"><![CDATA[<p>  蝴蝶效应的影响，在前期的时候，因为别人或者环境的影响，很长的一段时间，心情很悲伤，心态上的悲观，<br>导致后来的我遇到自己所爱的事物时，心中想着我本可以，却发现怎么都追赶不上了，前期的一次心态不好，会对后来的自己产生巨大的影响。<br>回想起来，当自己再经历一遍时，发现我还是不能改变环境和别人对我的影响，那时候的我是在感情用事吗？还是自己没有气度呢？<br>唯一能做的是改变自己，改变自己的心态和状态。</p><h2 id="人可以不认识人，但是灵魂认识灵魂"><a href="#人可以不认识人，但是灵魂认识灵魂" class="headerlink" title="人可以不认识人，但是灵魂认识灵魂"></a>人可以不认识人，但是灵魂认识灵魂</h2><h2 id="如果你抓住深渊不放，深渊也会抓住你不放"><a href="#如果你抓住深渊不放，深渊也会抓住你不放" class="headerlink" title="如果你抓住深渊不放，深渊也会抓住你不放"></a>如果你抓住深渊不放，深渊也会抓住你不放</h2><h2 id="马太效应"><a href="#马太效应" class="headerlink" title="马太效应"></a>马太效应</h2><p>   凡是有的，还要加给他，叫他多余。没有的，连他所有的，也要夺过来。任何时候，不要太悲伤，其实自己拥有很多，so far so good。</p><p>一个人有多好就有多坏，常怀慈悲之心，生而为人，务必善良。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  蝴蝶效应的影响，在前期的时候，因为别人或者环境的影响，很长的一段时间，心情很悲伤，心态上的悲观，&lt;br&gt;导致后来的我遇到自己所爱的事物时，心中想着我本可以，却发现怎么都追赶不上了，前期的一次心态不好，会对后来的自己产生巨大的影响。&lt;br&gt;回想起来，当自己再经历一遍时，发
      
    
    </summary>
    
    
      <category term="悟" scheme="http://yoursite.com/tags/%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>【Java并发】Java多线程Future的使用</title>
    <link href="http://yoursite.com/2018/10/17/Java%E5%B9%B6%E5%8F%91/%E3%80%90Java%E5%B9%B6%E5%8F%91%E3%80%91Java%E5%A4%9A%E7%BA%BF%E7%A8%8BFuture%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/10/17/Java并发/【Java并发】Java多线程Future的使用/</id>
    <published>2018-10-17T09:07:10.000Z</published>
    <updated>2018-10-17T09:59:56.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Future模式简述"><a href="#Future模式简述" class="headerlink" title="Future模式简述"></a>Future模式简述</h2><ul><li>在传统单线程环境下，调用函数是同步的，必须等待程序返回结果后，才可进行其他处理。</li><li>Future模式下，调用方式改为异步。</li><li>Future模式的核心在于：充分利用主函数中的等待时间，利用等待时间处理其他任务，充分利用计算资源<br>示例代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManipulationDataTask</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ManipulationDataTask</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String data1 = data.toUpperCase();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"业务处理线程处理中..."</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"业务处理线程处理完成,处理好的数据为"</span> + data1);</span><br><span class="line">        <span class="keyword">return</span> data1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line"></span><br><span class="line">        FutureTask&lt;String&gt; future1 = <span class="keyword">new</span> FutureTask&lt;String&gt;(<span class="keyword">new</span> ManipulationDataTask(<span class="string">"abc"</span>));</span><br><span class="line">        FutureTask&lt;String&gt; future2 = <span class="keyword">new</span> FutureTask&lt;String&gt;(<span class="keyword">new</span> ManipulationDataTask(<span class="string">"def"</span>));</span><br><span class="line">        FutureTask&lt;String&gt; future3 = <span class="keyword">new</span> FutureTask&lt;String&gt;(<span class="keyword">new</span> ManipulationDataTask(<span class="string">"ghi"</span>));</span><br><span class="line">        ManipulationDataTask manipulationDataTask = <span class="keyword">new</span> ManipulationDataTask(<span class="string">"jkl"</span>);</span><br><span class="line">        ExecutorService executor = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        executor.submit(future1);</span><br><span class="line">        executor.submit(future2);</span><br><span class="line">        executor.submit(future3);</span><br><span class="line">        Future&lt;String&gt; future4 =executor.submit(manipulationDataTask);</span><br><span class="line">        System.out.println(<span class="string">"请求完毕！"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"主线程先去做点别的事"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            System.out.println(<span class="string">"主线程的事情做完了"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"主线程开始获取子任务处理完的结果"</span>);</span><br><span class="line">        System.out.println(<span class="string">"数据处理完成："</span> + future1.get());</span><br><span class="line">        System.out.println(<span class="string">"数据处理完成："</span> + future2.get());</span><br><span class="line">        System.out.println(<span class="string">"数据处理完成："</span> + future3.get());</span><br><span class="line">        System.out.println(<span class="string">"数据处理完成："</span> + future4.get());</span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="程序运行结果："><a href="#程序运行结果：" class="headerlink" title="程序运行结果："></a>程序运行结果：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">请求完毕！</span><br><span class="line">主线程先去做点别的事</span><br><span class="line">pool-1-thread-1业务处理线程处理中...</span><br><span class="line">pool-1-thread-2业务处理线程处理中...</span><br><span class="line">pool-1-thread-3业务处理线程处理中...</span><br><span class="line">pool-1-thread-1业务处理线程处理完成,处理好的数据为ABC</span><br><span class="line">pool-1-thread-1业务处理线程处理中...</span><br><span class="line">pool-1-thread-2业务处理线程处理完成,处理好的数据为DEF</span><br><span class="line">pool-1-thread-3业务处理线程处理完成,处理好的数据为GHI</span><br><span class="line">pool-1-thread-1业务处理线程处理完成,处理好的数据为JKL</span><br><span class="line">主线程的事情做完了</span><br><span class="line">主线程开始获取子任务处理完的结果</span><br><span class="line">数据处理完成：ABC</span><br><span class="line">数据处理完成：DEF</span><br><span class="line">数据处理完成：GHI</span><br><span class="line">数据处理完成：JKL</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Future模式简述&quot;&gt;&lt;a href=&quot;#Future模式简述&quot; class=&quot;headerlink&quot; title=&quot;Future模式简述&quot;&gt;&lt;/a&gt;Future模式简述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在传统单线程环境下，调用函数是同步的，必须等待程序返回结果后，才
      
    
    </summary>
    
    
      <category term="java并发" scheme="http://yoursite.com/tags/java%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>java关键字transient,volatile</title>
    <link href="http://yoursite.com/2018/10/15/Java/java%E5%85%B3%E9%94%AE%E5%AD%97transient-volatile/"/>
    <id>http://yoursite.com/2018/10/15/Java/java关键字transient-volatile/</id>
    <published>2018-10-15T10:30:53.000Z</published>
    <updated>2018-10-16T03:25:10.792Z</updated>
    
    <content type="html"><![CDATA[<h3 id="被transient关键字修饰的变量不会被序列化"><a href="#被transient关键字修饰的变量不会被序列化" class="headerlink" title="被transient关键字修饰的变量不会被序列化"></a>被transient关键字修饰的变量不会被序列化</h3><h3 id="被volatile关键字修饰的变量，每次被线程访问时，都会强制从共享内存中重读改变量的值，但是不具备原子性"><a href="#被volatile关键字修饰的变量，每次被线程访问时，都会强制从共享内存中重读改变量的值，但是不具备原子性" class="headerlink" title="被volatile关键字修饰的变量，每次被线程访问时，都会强制从共享内存中重读改变量的值，但是不具备原子性"></a>被volatile关键字修饰的变量，每次被线程访问时，都会强制从共享内存中重读改变量的值，但是<strong>不具备原子性</strong></h3><h2 id="被volatile关键字修饰的变量的，具有以下两点特性："><a href="#被volatile关键字修饰的变量的，具有以下两点特性：" class="headerlink" title="被volatile关键字修饰的变量的，具有以下两点特性："></a>被volatile关键字修饰的变量的，具有以下两点特性：</h2><ol><li>保证了不同线程对该变量操作的内存可见性，不保证原子性。</li><li>禁止指令重排序</li></ol><hr><p>在java的内存模型中，JMM规定对于多个线程共享变量都存在主存中的，每个线程包含自己的工作内存，工作内存保存了主内存共享的变量，<br>其中一个线程要操作这些共享变量，只能通过操作工作内存中的副本来实现，操作完毕之后再同步会主内存中。在其他线程未将共享变量同步<br>会自己的工作内存之前，共享变量的改变对其不可见的。也就是说其他线程的工作内存中的变量已经过时了。</p><p>volatile是通过内存屏障和禁止指令重排序来保证内存可见性的，一个线程对volatile变量的修改，能即刻被其他线程所见，<br>但是不保证原子性。</p><p>使用volatile提供理想的线程安全，需要满足以下两个条件：</p><ol><li>对变量的写操作不依赖于当前值</li><li>该变量没有包含在具有其他变量的不变式中</li></ol><p>volatile变量不能用来做<strong>线程安全的计数器</strong></p><p>volatile的适用场景</p><h2 id="1-状态标志"><a href="#1-状态标志" class="headerlink" title="1. 状态标志"></a>1. 状态标志</h2><p>注意：这种状态标记<strong>通常只有一种状态转换</strong>如果需要状态的来回转换，可以使用原子变量。</p><h2 id="2-一次性安全发布"><a href="#2-一次性安全发布" class="headerlink" title="2. 一次性安全发布"></a>2. 一次性安全发布</h2><h2 id="3-独立观察"><a href="#3-独立观察" class="headerlink" title="3. 独立观察"></a>3. 独立观察</h2><p>定期“发布”观察结果供程序内部使用</p><h2 id="4-“volatile-bean”模式"><a href="#4-“volatile-bean”模式" class="headerlink" title="4. “volatile bean”模式"></a>4. “volatile bean”模式</h2><h2 id="5-开销较低“读-写锁”策略"><a href="#5-开销较低“读-写锁”策略" class="headerlink" title="5. 开销较低“读-写锁”策略"></a>5. 开销较低“读-写锁”策略</h2><hr><ul><li>状态位</li><li>一个线程写，多个线程读的场景</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;被transient关键字修饰的变量不会被序列化&quot;&gt;&lt;a href=&quot;#被transient关键字修饰的变量不会被序列化&quot; class=&quot;headerlink&quot; title=&quot;被transient关键字修饰的变量不会被序列化&quot;&gt;&lt;/a&gt;被transient关键字修
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/10/15/hello-world/"/>
    <id>http://yoursite.com/2018/10/15/hello-world/</id>
    <published>2018-10-15T08:05:35.909Z</published>
    <updated>2018-10-15T08:05:35.909Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringAOP原理</title>
    <link href="http://yoursite.com/2018/10/01/Java/SpringAOP%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/10/01/Java/SpringAOP原理/</id>
    <published>2018-10-01T15:06:32.000Z</published>
    <updated>2018-10-15T10:07:05.461Z</updated>
    
    <content type="html"><![CDATA[<h4 id="AOP（Aspect-OrientedProgramming，面向切面编程），可以说是OOP（Object-Oriented-Programing，面向对象编程）的补充和完善。"><a href="#AOP（Aspect-OrientedProgramming，面向切面编程），可以说是OOP（Object-Oriented-Programing，面向对象编程）的补充和完善。" class="headerlink" title="AOP（Aspect-OrientedProgramming，面向切面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。"></a>AOP（Aspect-OrientedProgramming，面向切面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。</h4><h3 id="AOP使用场景"><a href="#AOP使用场景" class="headerlink" title="AOP使用场景"></a>AOP使用场景</h3><ul><li>权限</li><li>缓存</li><li>内容传递</li><li>错误处理</li><li>懒加载</li><li>调试</li><li>记录跟踪 优化 校准</li><li>持久化</li><li>资源池</li><li>同步</li><li>事务</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;AOP（Aspect-OrientedProgramming，面向切面编程），可以说是OOP（Object-Oriented-Programing，面向对象编程）的补充和完善。&quot;&gt;&lt;a href=&quot;#AOP（Aspect-OrientedProgramming，面
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="AOP" scheme="http://yoursite.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Github 提交代码 Emoji</title>
    <link href="http://yoursite.com/2017/08/09/Git/GithubEmoji/"/>
    <id>http://yoursite.com/2017/08/09/Git/GithubEmoji/</id>
    <published>2017-08-09T15:55:41.000Z</published>
    <updated>2018-10-15T08:05:35.888Z</updated>
    
    <content type="html"><![CDATA[<p>An emoji guide for your commit messages: <a href="https://gitmoji.carloscuesta.me/" target="_blank" rel="noopener">gitmoji</a></p><table><thead><tr><th>Code</th><th>Emoji</th><th>描述</th></tr></thead><tbody><tr><td><code>:art:</code></td><td>:art:</td><td>改进代码的结构/格式</td></tr><tr><td><code>:zap:</code></td><td>:zap:</td><td>提高性能</td></tr><tr><td><code>:fire:</code></td><td>:fire:</td><td>删除代码或文件</td></tr><tr><td><code>:bug:</code></td><td>:bug:</td><td>修复bug</td></tr><tr><td><code>:ambulance:</code></td><td>:ambulance:</td><td>关键修补程序</td></tr><tr><td><code>:sparkles:</code></td><td>:sparkles:</td><td>引入新功能</td></tr><tr><td><code>:memo:</code></td><td>:memo:</td><td>写文档</td></tr><tr><td><code>:rocket:</code></td><td>:rocket:</td><td>部署项目</td></tr><tr><td><code>:lipstick:</code></td><td>:lipstick:</td><td>更新UI和样式文件</td></tr><tr><td><code>:tada:</code></td><td>:tada:</td><td>初始提交</td></tr><tr><td><code>:white_check_mark:</code></td><td>:white_check_mark:</td><td>添加测试</td></tr><tr><td><code>:lock:</code></td><td>:lock:</td><td>解决安全问题</td></tr><tr><td><code>:apple:</code></td><td>:apple:</td><td>修改 macOS 下的一些问题</td></tr><tr><td><code>:penguin:</code></td><td>:penguin:</td><td>修改 Linux 下的一些问题</td></tr><tr><td><code>:checkered_flag:</code></td><td>:checkered_flag:</td><td>修改 Windows 下的一些问题</td></tr><tr><td><code>:robot:</code></td><td>:robot:</td><td>修改 Android 下的一些问题</td></tr><tr><td><code>:green_apple:</code></td><td>:green_apple:</td><td>修改 IOS 下的一些问题</td></tr><tr><td><code>:bookmark:</code></td><td>:bookmark:</td><td>发布版本标签</td></tr><tr><td><code>:rotating_light:</code></td><td>:rotating_light:</td><td>移除 linter 警告</td></tr><tr><td><code>:construction:</code></td><td>:construction:</td><td>工作正在进行中</td></tr><tr><td><code>:green_heart:</code></td><td>:green_heart:</td><td>修复CI构建</td></tr><tr><td><code>:arrow_down:</code></td><td>:arrow_down:</td><td>降级依赖</td></tr><tr><td><code>:arrow_up:</code></td><td>:arrow_up:</td><td>更新依赖</td></tr><tr><td><code>:construction_worker:</code></td><td>:construction_worker:</td><td>添加CI构建系统</td></tr><tr><td><code>:chart_with_upwards_trend:</code></td><td>:chart_with_upwards_trend:</td><td>添加分析或跟踪代码</td></tr><tr><td><code>:hammer:</code></td><td>:hammer:</td><td>重构代码</td></tr><tr><td><code>:heavy_minus_sign:</code></td><td>:heavy_minus_sign:</td><td>删除依赖关系</td></tr><tr><td><code>:whale:</code></td><td>:whale:</td><td>关于Docker的工作</td></tr><tr><td><code>:heavy_plus_sign:</code></td><td>:heavy_plus_sign:</td><td>添加依赖关系</td></tr><tr><td><code>:wrench:</code></td><td>:wrench:</td><td>更改配置文件</td></tr><tr><td><code>:globe_with_meridians:</code></td><td>:globe_with_meridians:</td><td>国际化和本地化</td></tr><tr><td><code>:pencil2:</code></td><td>:pencil2:</td><td>修正打字错误</td></tr><tr><td><code>:hankey:</code></td><td>:hankey:</td><td>编写不好的代码，需要改进</td></tr><tr><td><code>:rewind:</code></td><td>:rewind:</td><td>还原更改</td></tr><tr><td><code>:twisted_rightwards_arrows:</code></td><td>:twisted_rightwards_arrows:</td><td>合并分支</td></tr><tr><td><code>:package:</code></td><td>:package:</td><td>更新已编译的文件或包</td></tr><tr><td><code>:alien:</code></td><td>:alien:</td><td>由于外部API更改而更新代码</td></tr><tr><td><code>:truck:</code></td><td>:truck:</td><td>移动或重命名文件</td></tr><tr><td><code>:page_facing_up:</code></td><td>:page_facing_up:</td><td>添加或更新许可证</td></tr><tr><td><code>:boom:</code></td><td>:boom:</td><td>引入爆炸改变</td></tr><tr><td><code>:bento:</code></td><td>:bento:</td><td>添加或更新资源</td></tr><tr><td><code>:ok_hand:</code></td><td>:ok_hand:</td><td>由于代码审查更改而更新代码</td></tr><tr><td><code>:wheelchair:</code></td><td>:wheelchair:</td><td>改善无障碍</td></tr><tr><td><code>:bulb:</code></td><td>:bulb:</td><td>文档化源代码</td></tr><tr><td><code>:beers:</code></td><td>:beers:</td><td>沉迷写代码</td></tr><tr><td><code>:speech_balloon:</code></td><td>:speech_balloon:</td><td>更新文本和常量</td></tr><tr><td><code>:card_file_box:</code></td><td>:card_file_box:</td><td>执行数据库相关更改</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;An emoji guide for your commit messages: &lt;a href=&quot;https://gitmoji.carloscuesta.me/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gitmoji&lt;/a&gt;&lt;/p&gt;
&lt;table
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
</feed>
