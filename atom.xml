<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>plgy_y</title>
  
  <subtitle>plgy_y的Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-04T11:03:47.839Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yangyuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kafka</title>
    <link href="http://yoursite.com/2018/11/02/Kafka/kafka/"/>
    <id>http://yoursite.com/2018/11/02/Kafka/kafka/</id>
    <published>2018-11-02T08:41:59.000Z</published>
    <updated>2018-11-04T11:03:47.839Z</updated>
    
    <content type="html"><![CDATA[<ul><li>kafka是一个分布式消息队列。具有高性能、持久化、多副本备份、横向拓展能力。</li><li><p>kafka对外使用topic的概念，生产者往topic里写消息，消费者从topic中读消息。一个topic实际是由多个partition组成的，遇到瓶颈时，<br>可以通过增加partition的数量来进行横向扩容。单个parition内是保证消息有序。</p></li><li><p>**Kafka ActiveMQ RabbitMQ对比</p></li></ul><p><strong>1、 TPS</strong></p><ul><li>Kafka最高，RabbitMq次之，ActiveMq最差</li></ul><p><strong>2、 吞吐量对比</strong><br>kafka具有高的吞吐量，内部采用消息的批量处理，zero-copy机制，数据的存储和获取是本地磁盘顺序批量操作，具有O(1)复杂度，消息处理的效率很高。</p><p>Zero-Copy技术<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">通常情况下文件从读取到通过Socket发送进行了4次拷贝：</span><br><span class="line">1、调用read时，文件A拷贝到了kernel模式；</span><br><span class="line">2、CPU控制将kernel模式数据copy到user模式下；</span><br><span class="line">3、调用write时，先将user模式下的内容copy到kernel模式下的socket的buffer中；</span><br><span class="line">4、将kernel模式下的socket buffer的数据copy到网卡设备中传送；</span><br><span class="line"></span><br><span class="line">Zero-Copy技术省去了将操作系统的read buffer拷贝到程序的buffer，以及从程序buffer拷贝到socket buffer的步骤，</span><br><span class="line">1、将文件拷贝到kernel buffer中；</span><br><span class="line">2、向socket buffer中追加当前要发生的数据在kernel buffer中的位置和偏移量；</span><br><span class="line">3、根据socket buffer中的位置和偏移量直接将kernel buffer的数据copy到网卡设备（protocol engine）中；</span><br></pre></td></tr></table></figure></p><p><strong>3、在架构模型方面</strong><br>RabbitMQ实现了AMQP协议（advanced message queue protocol高级消息队列协议）<br>RabbitMQ有消息确认机制；<br>Kafka遵从一般的MQ结构，无消息确认机制。<br><strong>4、在可用性方面</strong><br>RabbitMQ支持miror的queue，主queue失效，miror queue接管。<br>Kafka的broker支持主备模式<br>ActiveMq也支持主备模式</p><ul><li><strong>Kafka的优缺点</strong></li><li>优点：<ul><li>主要用来解决百万级别的数据中生产者和消费者之间数据传输</li><li>可以将一条数据提供给多个接受短做不同的处理</li><li>两个系统间的通讯</li><li>做为日志的收集的一环</li><li>kafka吞吐量高，单机吞吐量kafka达十万级，而ActiveMQ，RabbitMQ，RocketMQ的吞吐量为万级。</li><li>分布式容灾好</li><li>数据量不会影响到KafKa的速度</li></ul></li><li>缺点：<ul><li>不支持事务</li><li>重复消息。Kafka保证每条消息至少送达一次，虽然几率很小，但一条消息可能被送达多次</li><li>消息乱序。Kafka某一个固定的Partition内部的消息是保证有序的，如果一个Topic有多个Partition，partition之间的消息送达不保证有序。</li><li>复杂性。Kafka需要Zookeeper的支持，Topic一般需要人工创建，部署和维护比一般MQ成本更高</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;kafka是一个分布式消息队列。具有高性能、持久化、多副本备份、横向拓展能力。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;kafka对外使用topic的概念，生产者往topic里写消息，消费者从topic中读消息。一个topic实际是由多个partition组成的，遇到瓶颈时，&lt;
      
    
    </summary>
    
    
      <category term="kafka" scheme="http://yoursite.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="http://yoursite.com/2018/10/31/Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/10/31/Linux/Linux常用命令/</id>
    <published>2018-10-31T02:21:53.000Z</published>
    <updated>2018-11-02T08:06:52.385Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><strong><font color="#000" face="微软雅黑">查看使用内存最多的10个进程</font></strong></p></li><li><p>ps -aux | sort -k4nr | head -n 10</p></li><li><p>top （然后按下M，注意大写）</p></li><li><p><strong><font color="#000" face="微软雅黑">查看使用CPU最多的10个进程</font></strong></p></li><li><p>ps -aux | sort -k3nr | head -n 10</p></li><li><h2 id="top-（然后按下P，注意大写"><a href="#top-（然后按下P，注意大写" class="headerlink" title="top （然后按下P，注意大写)"></a>top （<font color="#FF0000" face="微软雅黑">然后按下P，注意大写</font>)</h2><p>ps命令参数解释<br>-a ： 显示现行终端机下的所有进程，包括其他用户的进程；<br>-u ： 以用户为主的进程状态 ；<br>x ： 通常与 a 这个参数一起使用，可列出较完整信息。</p><h2 id="查看网卡流量"><a href="#查看网卡流量" class="headerlink" title="查看网卡流量"></a>查看网卡流量</h2><ul><li>watch more /proc/net/dev  可以查看每2秒的字节和数据包的变化</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;#000&quot; face=&quot;微软雅黑&quot;&gt;查看使用内存最多的10个进程&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ps -aux | sort -k4nr | head -n 10&lt;/p&gt;
&lt;/l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux文本处理常用命令</title>
    <link href="http://yoursite.com/2018/10/30/Linux/Linux%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/10/30/Linux/Linux文本处理常用命令/</id>
    <published>2018-10-30T07:10:41.000Z</published>
    <updated>2018-11-01T12:48:01.757Z</updated>
    
    <content type="html"><![CDATA[<p>Linux文本处理常用命令：<strong>grep、sed、printf、awk、cut、sort</strong></p><h2 id="1-grep"><a href="#1-grep" class="headerlink" title="1. grep"></a>1. grep</h2><p>按行查找字符，输出包含字符的行<br>用法</p><ol><li>grep ‘key’ test.txt</li><li>cat test.txt|grep ‘key’</li></ol><table><thead><tr><th>参数</th><th>含义及示例</th></tr></thead><tbody><tr><td>-n</td><td>输出结果加行号</td></tr><tr><td>–color=auto</td><td>匹配的关键字高亮显示</td></tr><tr><td>-A2</td><td>输出匹配行的后两行</td></tr><tr><td>-B2</td><td>输出匹配行的前两行</td></tr><tr><td>-v</td><td>反向查找，即输出不包含关键字的行</td></tr><tr><td>-i</td><td>关键字匹配时忽略关键字大小写</td></tr></tbody></table><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &apos;o\&#123;3\&#125;&apos;　　//查找两个o，这里需要注意，&#123;&#125;在shell里有特殊意义，因此需要转义。</span><br></pre></td></tr></table></figure></p><h4 id="egrep"><a href="#egrep" class="headerlink" title="egrep:"></a>egrep:</h4><p>正则表达式分为基本正则表达式和扩展正则表达式，grep只支持基本正则表达式，如果要使用扩展正则表达式，需要使用egrep命令<br>列如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">egrep &apos;123|1234&apos; //查找123或1234</span><br><span class="line">egrep &apos;1(23|234)5&apos; //查找1235或12345</span><br><span class="line">egrep &apos;1(23)+45&apos; //查找1X45，其中X是一个或一个以上的‘23’字符串</span><br></pre></td></tr></table></figure></p><h2 id="2-sed"><a href="#2-sed" class="headerlink" title="2.sed"></a>2.sed</h2><p>sed可以用来做<strong>行删除、行新增、行选取、行替换、字符串替换</strong><br>使用方式：cat test.txt | sed ‘2d’  或者 sed ‘2d’test.txt</p><ol><li>行删除<br>sed ‘2,5d’ //删除第2-5行<br>sed ‘3,$d’ //删除第3到最后一行<br>sed ‘/^$/d’//删除空行</li><li>行新增<br>sed ‘2a abc’ //在第二行下面追加一行“abc”，a代表append<br>sed ‘2i abc’ //在第二行上面插入一行 “abc”，i代表insert<br>sed ‘2a a\<br>b\<br>c’　　//在第二行下面追加三行 “a”、”b”、”c”，只需要每行结尾加”\”即可。</li><li>行选取<br>sed -n ‘7,9p’　　//选取第5到7行输出，必须加-n参数，不然效果就是所有行都被输出，而7到9行输出两次。</li><li>行替换<br>sed ‘2,5c abc’　　//将第2到5行替换为一行字符串”abc”</li><li>字符串替换<br>sed ‘s/要被替换的字符串/新的字符串/g’ /可以是#号之类的，在被替换的字符串包含/时，可以考虑别的分隔符。要被替换的字符串可以是<br>正则表达式</li></ol><p>注意：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">操作特定区间或规则的行</span><br><span class="line">sed &apos;8,$s/aa/AA/g&apos; test.txt 对第8行到文件末尾的所有行进行搜索替换操作</span><br><span class="line">sed &apos;/^[0-9]/s/aa/AA/g&apos; test.txt 正则表达式表示对所有以数字开头的行，执行s操作</span><br><span class="line"></span><br><span class="line">sed的正则中  \(\)  和 \&#123;m,n\&#125; 需要转义</span><br><span class="line">. 表示任意字符</span><br><span class="line">* 表示零个或者多个</span><br><span class="line">\+ 一次或多次　　</span><br><span class="line">\? 零次或一次</span><br><span class="line">\| 表示或语法</span><br></pre></td></tr></table></figure></p><h2 id="3-printf"><a href="#3-printf" class="headerlink" title="3. printf"></a>3. printf</h2><p>格式化并打印数据<br>printf ‘%10s %10s %10s %10s %10s \n’ <code>cat test.txt</code>    %10s代表这一列的宽度固定为10个字符<br>%-10s 指一个宽度为10个字符（-表示左对齐，没有则表示右对齐）</p><h2 id="4-awk"><a href="#4-awk" class="headerlink" title="4. awk"></a>4. awk</h2><p>NF ：每一行分隔后的列数<br>NR ：行号<br>FS=”,”：以”,”分割行<br>cat test.txt |awk ‘NR==1 {printf “%10s %10s %10s %10s %10s \n”,$1,$2,$3,$4,”Total”};NR&gt;1 {printf “%10s %10s %10s %10s %10s \n”,$1,$2,$3,$4,$2+$3+$4}’</p><ol><li>加入条件判断后，awk的格式为： awk ‘条件1 {命令1};条件2{命令2}’</li><li><p>条件判断有以下逻辑运算：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&lt;</span><br><span class="line">&gt;=</span><br><span class="line">&lt;=</span><br><span class="line">==　　//注意判断相等要用两个等号</span><br><span class="line">!=</span><br></pre></td></tr></table></figure></li><li><p>可以直接运算行内列的值($1、$2、$3)。</p></li></ol><h2 id="5-其他"><a href="#5-其他" class="headerlink" title="5. 其他"></a>5. 其他</h2><p>1）cut切割字符</p><ul><li>以“，”切割文件并取出第1列<br>cat  test.txt |cut -d ‘,’ -f 1| sort | uniq -c | sort -rn -k1 &gt; new_test.txt</li></ul><p>2）sort排序的时候注意默认是按照字典的方式排序，如果按照数字时则必须加上-n</p><ul><li>uniq去除重复，只能去除相邻的重复，所以要先排序，后去除重复</li></ul><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td>grep/egrep</td><td>关键字查找</td></tr><tr><td>sed</td><td>1.行的删除、添加、替换、选取 <br> 2.关键字替换</td></tr><tr><td>printf</td><td>文本格式化输出</td></tr><tr><td>awk</td><td>1. 将每行按分隔符拆分成列并选取某些列<br>2. 通过逻辑判断对不同行进行不同的处理<br>3.对一行中的几列数值进行计算</td></tr><tr><td>cat</td><td>切割字符</td></tr><tr><td>sort</td><td>排序</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux文本处理常用命令：&lt;strong&gt;grep、sed、printf、awk、cut、sort&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-grep&quot;&gt;&lt;a href=&quot;#1-grep&quot; class=&quot;headerlink&quot; title=&quot;1. grep&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令</title>
    <link href="http://yoursite.com/2018/10/30/Linux/Linux%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/10/30/Linux/Linux命令/</id>
    <published>2018-10-30T06:58:48.000Z</published>
    <updated>2018-11-02T03:02:13.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><ul><li>-n ： 依照数值的大小排序。(不加-n参数，默认按照字符ASSII码的排序 会出现如（1,11,2,3..）这样的排序)</li><li>-k 指定按某一列排序 从1开始。</li><li>-r: 以相反的顺序来排序。(默认是从小到大，加上-r即从大到小)</li></ul><hr><ul><li>-t 设定分隔符,使用指定的分隔符代替非空格到空格的转换</li><li>-b   忽略每行前面开始出的空格字符。</li><li>-c   检查文件是否已经按照顺序排序。</li><li>-d   排序时，处理英文字母、数字及空格字符外，忽略其他的字符。</li><li>-f   排序时，将小写字母视为大写字母。</li><li>-i   排序时，除了040至176之间的ASCII字符外，忽略其他的字符。</li><li>-m   将几个排序好的文件进行合并。</li><li>-M   将前面3个字母依照月份的缩写进行排序。</li><li>-o&lt;输出文件&gt;   将排序后的结果存入指定的文件。</li><li>+&lt;起始栏位&gt;-&lt;结束栏位&gt;   以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。<br>sort -n -k 2 -t’-‘ test.txt<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//原来的内容</span><br><span class="line">[root@h2 ~]# cat test.txt</span><br><span class="line">2018-12-01</span><br><span class="line">2013-01-08</span><br><span class="line">2015-10-24</span><br><span class="line">2016-04-25</span><br><span class="line"></span><br><span class="line">[root@h2 ~]# sort -nk2 -t&apos;-&apos; test.txt</span><br><span class="line">2013-01-08</span><br><span class="line">2016-04-25</span><br><span class="line">2015-10-24</span><br><span class="line">2018-12-01</span><br></pre></td></tr></table></figure></li></ul><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>head用于显示文件的开头的内容。在默认情况下，head命令显示文件的头10行内容。</p><ul><li>-n&lt;数字&gt; –lines=[-]K     ：指定显示头部内容的行数；如果附加”-“参数，则除了每个文件的最后K 行外显示<pre><code>剩余全部内容</code></pre></li><li>-v：总是显示文件名的头信息；</li><li>-q：不显示文件名的头信息。</li><li>-c,  –bytes=[-]K    显示每个文件的前K 字节内容</li></ul><h2 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h2><p>只过滤相邻的重复行。</p><ul><li>-c, –count        在每行前加上表示相应行目出现次数的前缀编号</li></ul><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><ul><li>find base_path 列出当前目录和子目录下的所有文件和文件夹</li><li>find path -name ‘*txt’ 根据文件名或者正则表达式匹配搜索</li><li>find path -iname ‘*txt’ 同上，忽略大小写</li><li>find path ! -name ‘*txt’ 对上面的搜索结果取反</li><li>find path -type d 根据文件类型搜索，d文件夹，f普通文件，etc</li><li>find path -type f -size +2k 根据文件大小搜索，+2k大于2k的文件，-2k小于2k的文件，2k等你2k的文件</li><li>find path -type f -name ‘*txt’ -delete 删除匹配到的文件</li><li>find path -mtime -2 查找文件更新日时在距现在时刻二天以内的文件</li><li>find path -mtime +2 查找文件更新日时在距现在时刻二天以上的文件</li><li>find path -mtime 2 查找文件更新日时在距现在时刻一天以上二天以内的文件</li><li>find path -mmin -2 查找文件更新日时在距现在时刻二分以内的文件</li><li>find path -mmin +2 查找文件更新日时在距现在时刻二分以上的文件</li><li>find path -mmin 2 查找文件更新日时在距现在时刻一分以上二分以内的文件</li><li>find path -perm 664 查找权限为664的文件或目录(需完全符合)</li><li>find path -empty 查找空文件或空目录</li><li>find path -empty -type f -print -delete查找空文件并删除</li><li>find path -size -10c 查找文件size小于10个字节的文件或目录</li><li>find path -size 10c 查找文件size等于10个字节的文件或目录</li><li>find path -size +10c 查找文件size大于10个字节的文件或目录</li><li>find path -size -10k 查找文件size小于10k的文件或目录</li><li>find path -size -10M 查找文件size小于10M的文件或目录</li><li>find path -size -10G 查找文件size小于10G的文件或目录</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;sort&quot;&gt;&lt;a href=&quot;#sort&quot; class=&quot;headerlink&quot; title=&quot;sort&quot;&gt;&lt;/a&gt;sort&lt;/h2&gt;&lt;h3 id=&quot;常用参数&quot;&gt;&lt;a href=&quot;#常用参数&quot; class=&quot;headerlink&quot; title=&quot;常用参数&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Git创建本地分支并关联远程分支</title>
    <link href="http://yoursite.com/2018/10/29/Git/Git%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%B9%B6%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/"/>
    <id>http://yoursite.com/2018/10/29/Git/Git创建本地分支并关联远程分支/</id>
    <published>2018-10-29T06:16:57.000Z</published>
    <updated>2018-11-01T11:06:38.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建本地分支"><a href="#创建本地分支" class="headerlink" title="创建本地分支"></a>创建本地分支</h2><ul><li>git branch 分支名</li></ul><h2 id="切换到本地分支"><a href="#切换到本地分支" class="headerlink" title="切换到本地分支"></a>切换到本地分支</h2><ul><li>git checkout 分支名</li></ul><h2 id="创建本地分支并切换到该分支"><a href="#创建本地分支并切换到该分支" class="headerlink" title="创建本地分支并切换到该分支"></a>创建本地分支并切换到该分支</h2><ul><li>git checkout -b 分支名</li></ul><h2 id="提交本地分支到远程仓库"><a href="#提交本地分支到远程仓库" class="headerlink" title="提交本地分支到远程仓库"></a>提交本地分支到远程仓库</h2><ul><li>git push origin 本地分支名</li></ul><h2 id="将新建的本地分支与远程分支关联"><a href="#将新建的本地分支与远程分支关联" class="headerlink" title="将新建的本地分支与远程分支关联"></a>将新建的本地分支与远程分支关联</h2><p>-git branch –set-upstream-to=origin/远程分支名  本地分支名<br> 使用git branch –set-upstream 本地分支名 origin/远程分支名 命令报如下错误<br>fatal: the ‘–set-upstream’ option is no longer supported. Please use ‘–track’ or ‘–set-upstream-to’ instead.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建本地分支&quot;&gt;&lt;a href=&quot;#创建本地分支&quot; class=&quot;headerlink&quot; title=&quot;创建本地分支&quot;&gt;&lt;/a&gt;创建本地分支&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;git branch 分支名&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;切换到本地分支&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="http://yoursite.com/2018/10/19/Git/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/10/19/Git/Git常用命令/</id>
    <published>2018-10-19T09:28:38.000Z</published>
    <updated>2018-10-29T06:19:01.747Z</updated>
    
    <content type="html"><![CDATA[<ul><li>git init<ul><li>在本地当前目录初始化一个git仓库</li></ul></li><li><p>git clone</p></li><li><p>git status</p></li><li><p>git log</p></li><li><p>git add</p></li><li><p>git diff</p></li><li><p>git commit</p></li><li><p>git reset</p></li><li><p>git revert</p></li><li><p>git rm</p></li><li><p>git clean</p></li><li><p>git mv</p></li><li><p>git stash</p></li><li><p>git branch</p></li><li><p>git checkout</p></li><li><p>git merge</p></li><li><p>git tag</p></li><li><p>git remote</p></li><li><p>git fetch</p></li><li><p>git pull</p></li><li><p>git rebase</p></li><li><p>git push</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;git init&lt;ul&gt;
&lt;li&gt;在本地当前目录初始化一个git仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git clone&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git status&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git log&lt;/p&gt;
&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://yoursite.com/2018/10/19/DesignPattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/10/19/DesignPattern/设计模式/</id>
    <published>2018-10-19T08:08:41.000Z</published>
    <updated>2018-10-19T09:27:29.239Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/10/19/DesignPattern/设计模式/designpatternbg.jpg" alt=""></p><h2 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h2><h4 id="设计模式分为三大类："><a href="#设计模式分为三大类：" class="headerlink" title="设计模式分为三大类："></a>设计模式分为三大类：</h4><ul><li>创建型模式，共五种：<ul><li>工厂方法模式，抽象工厂模式，单例模式，建造者模式，原型模式</li></ul></li><li>结构型模式，共七种：<ul><li>适配器模式，装饰器模式，代理模式，外观模式，桥接模式，组合模式，享元模式</li></ul></li><li>行为型模式，共十一种：<ul><li>策略模式，模板方法模式，观察者模式，迭代子模式，责任链模式，命令模式，备忘录模式，状态模式，访问者模式，<br>中介者模式，解释器模式</li></ul></li></ul><h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><h4 id="1、单一职责原则"><a href="#1、单一职责原则" class="headerlink" title="1、单一职责原则"></a>1、单一职责原则</h4><ul><li>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。</li></ul><h4 id="2、里氏替换原则（Liskov-Substitution-Principle）"><a href="#2、里氏替换原则（Liskov-Substitution-Principle）" class="headerlink" title="2、里氏替换原则（Liskov Substitution Principle）"></a>2、里氏替换原则（Liskov Substitution Principle）</h4><pre><code>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科历史替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</code></pre><h4 id="3、依赖倒转原则（Dependence-Inversion-Principle）"><a href="#3、依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="3、依赖倒转原则（Dependence Inversion Principle）"></a>3、依赖倒转原则（Dependence Inversion Principle）</h4><ul><li>这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</li></ul><h4 id="4、接口隔离原则（Interface-Segregation-Principle）"><a href="#4、接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="4、接口隔离原则（Interface Segregation Principle）"></a>4、接口隔离原则（Interface Segregation Principle）</h4><ul><li>每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。</li></ul><h4 id="5、迪米特法则（最少知道原则）（Demeter-Principle）"><a href="#5、迪米特法则（最少知道原则）（Demeter-Principle）" class="headerlink" title="5、迪米特法则（最少知道原则）（Demeter Principle）"></a>5、迪米特法则（最少知道原则）（Demeter Principle）</h4><ul><li><p>一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</p></li><li><p>最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。</p></li></ul><h4 id="6、合成复用原则（Composite-Reuse-Principle）"><a href="#6、合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="6、合成复用原则（Composite Reuse Principle）"></a>6、合成复用原则（Composite Reuse Principle）</h4><ul><li>原则是尽量首先使用合成/聚合的方式，而不是使用继承。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/10/19/DesignPattern/设计模式/designpatternbg.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;设计模式的分类&quot;&gt;&lt;a href=&quot;#设计模式的分类&quot; class=&quot;headerlink&quot; title=&quot;设
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>幽静的小路</title>
    <link href="http://yoursite.com/2018/10/17/Journey/%E5%B9%BD%E9%9D%99%E7%9A%84%E5%B0%8F%E8%B7%AF/"/>
    <id>http://yoursite.com/2018/10/17/Journey/幽静的小路/</id>
    <published>2018-10-17T10:05:34.000Z</published>
    <updated>2018-10-19T03:03:57.270Z</updated>
    
    <content type="html"><![CDATA[<p>  蝴蝶效应的影响，在前期的时候，因为别人或者环境的影响，很长的一段时间，心情很悲伤，心态上的悲观，<br>导致后来的我遇到自己所爱的事物时，心中想着我本可以，却发现怎么都追赶不上了，前期的一次心态不好，会对后来的自己产生巨大的影响。<br>回想起来，当自己再经历一遍时，发现我还是不能改变环境和别人对我的影响，那时候的我是在感情用事吗？还是自己没有气度呢？<br>唯一能做的是改变自己，改变自己的心态和状态。</p><h2 id="人可以不认识人，但是灵魂认识灵魂"><a href="#人可以不认识人，但是灵魂认识灵魂" class="headerlink" title="人可以不认识人，但是灵魂认识灵魂"></a>人可以不认识人，但是灵魂认识灵魂</h2><h2 id="如果你抓住深渊不放，深渊也会抓住你不放"><a href="#如果你抓住深渊不放，深渊也会抓住你不放" class="headerlink" title="如果你抓住深渊不放，深渊也会抓住你不放"></a>如果你抓住深渊不放，深渊也会抓住你不放</h2><h2 id="马太效应"><a href="#马太效应" class="headerlink" title="马太效应"></a>马太效应</h2><p>   凡是有的，还要加给他，叫他多余。没有的，连他所有的，也要夺过来。任何时候，不要太悲伤，其实自己拥有很多，so far so good。</p><p>一个人有多好就有多坏，常怀慈悲之心，生而为人，务必善良。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  蝴蝶效应的影响，在前期的时候，因为别人或者环境的影响，很长的一段时间，心情很悲伤，心态上的悲观，&lt;br&gt;导致后来的我遇到自己所爱的事物时，心中想着我本可以，却发现怎么都追赶不上了，前期的一次心态不好，会对后来的自己产生巨大的影响。&lt;br&gt;回想起来，当自己再经历一遍时，发
      
    
    </summary>
    
    
      <category term="悟" scheme="http://yoursite.com/tags/%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>【Java并发】Java多线程Future的使用</title>
    <link href="http://yoursite.com/2018/10/17/Java%E5%B9%B6%E5%8F%91/%E3%80%90Java%E5%B9%B6%E5%8F%91%E3%80%91Java%E5%A4%9A%E7%BA%BF%E7%A8%8BFuture%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/10/17/Java并发/【Java并发】Java多线程Future的使用/</id>
    <published>2018-10-17T09:07:10.000Z</published>
    <updated>2018-10-17T09:59:56.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Future模式简述"><a href="#Future模式简述" class="headerlink" title="Future模式简述"></a>Future模式简述</h2><ul><li>在传统单线程环境下，调用函数是同步的，必须等待程序返回结果后，才可进行其他处理。</li><li>Future模式下，调用方式改为异步。</li><li>Future模式的核心在于：充分利用主函数中的等待时间，利用等待时间处理其他任务，充分利用计算资源<br>示例代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManipulationDataTask</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ManipulationDataTask</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String data1 = data.toUpperCase();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"业务处理线程处理中..."</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"业务处理线程处理完成,处理好的数据为"</span> + data1);</span><br><span class="line">        <span class="keyword">return</span> data1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line"></span><br><span class="line">        FutureTask&lt;String&gt; future1 = <span class="keyword">new</span> FutureTask&lt;String&gt;(<span class="keyword">new</span> ManipulationDataTask(<span class="string">"abc"</span>));</span><br><span class="line">        FutureTask&lt;String&gt; future2 = <span class="keyword">new</span> FutureTask&lt;String&gt;(<span class="keyword">new</span> ManipulationDataTask(<span class="string">"def"</span>));</span><br><span class="line">        FutureTask&lt;String&gt; future3 = <span class="keyword">new</span> FutureTask&lt;String&gt;(<span class="keyword">new</span> ManipulationDataTask(<span class="string">"ghi"</span>));</span><br><span class="line">        ManipulationDataTask manipulationDataTask = <span class="keyword">new</span> ManipulationDataTask(<span class="string">"jkl"</span>);</span><br><span class="line">        ExecutorService executor = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        executor.submit(future1);</span><br><span class="line">        executor.submit(future2);</span><br><span class="line">        executor.submit(future3);</span><br><span class="line">        Future&lt;String&gt; future4 =executor.submit(manipulationDataTask);</span><br><span class="line">        System.out.println(<span class="string">"请求完毕！"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"主线程先去做点别的事"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            System.out.println(<span class="string">"主线程的事情做完了"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"主线程开始获取子任务处理完的结果"</span>);</span><br><span class="line">        System.out.println(<span class="string">"数据处理完成："</span> + future1.get());</span><br><span class="line">        System.out.println(<span class="string">"数据处理完成："</span> + future2.get());</span><br><span class="line">        System.out.println(<span class="string">"数据处理完成："</span> + future3.get());</span><br><span class="line">        System.out.println(<span class="string">"数据处理完成："</span> + future4.get());</span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="程序运行结果："><a href="#程序运行结果：" class="headerlink" title="程序运行结果："></a>程序运行结果：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">请求完毕！</span><br><span class="line">主线程先去做点别的事</span><br><span class="line">pool-1-thread-1业务处理线程处理中...</span><br><span class="line">pool-1-thread-2业务处理线程处理中...</span><br><span class="line">pool-1-thread-3业务处理线程处理中...</span><br><span class="line">pool-1-thread-1业务处理线程处理完成,处理好的数据为ABC</span><br><span class="line">pool-1-thread-1业务处理线程处理中...</span><br><span class="line">pool-1-thread-2业务处理线程处理完成,处理好的数据为DEF</span><br><span class="line">pool-1-thread-3业务处理线程处理完成,处理好的数据为GHI</span><br><span class="line">pool-1-thread-1业务处理线程处理完成,处理好的数据为JKL</span><br><span class="line">主线程的事情做完了</span><br><span class="line">主线程开始获取子任务处理完的结果</span><br><span class="line">数据处理完成：ABC</span><br><span class="line">数据处理完成：DEF</span><br><span class="line">数据处理完成：GHI</span><br><span class="line">数据处理完成：JKL</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Future模式简述&quot;&gt;&lt;a href=&quot;#Future模式简述&quot; class=&quot;headerlink&quot; title=&quot;Future模式简述&quot;&gt;&lt;/a&gt;Future模式简述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在传统单线程环境下，调用函数是同步的，必须等待程序返回结果后，才
      
    
    </summary>
    
    
      <category term="java并发" scheme="http://yoursite.com/tags/java%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>java关键字transient,volatile</title>
    <link href="http://yoursite.com/2018/10/15/Java/java%E5%85%B3%E9%94%AE%E5%AD%97transient-volatile/"/>
    <id>http://yoursite.com/2018/10/15/Java/java关键字transient-volatile/</id>
    <published>2018-10-15T10:30:53.000Z</published>
    <updated>2018-10-16T03:25:10.792Z</updated>
    
    <content type="html"><![CDATA[<h3 id="被transient关键字修饰的变量不会被序列化"><a href="#被transient关键字修饰的变量不会被序列化" class="headerlink" title="被transient关键字修饰的变量不会被序列化"></a>被transient关键字修饰的变量不会被序列化</h3><h3 id="被volatile关键字修饰的变量，每次被线程访问时，都会强制从共享内存中重读改变量的值，但是不具备原子性"><a href="#被volatile关键字修饰的变量，每次被线程访问时，都会强制从共享内存中重读改变量的值，但是不具备原子性" class="headerlink" title="被volatile关键字修饰的变量，每次被线程访问时，都会强制从共享内存中重读改变量的值，但是不具备原子性"></a>被volatile关键字修饰的变量，每次被线程访问时，都会强制从共享内存中重读改变量的值，但是<strong>不具备原子性</strong></h3><h2 id="被volatile关键字修饰的变量的，具有以下两点特性："><a href="#被volatile关键字修饰的变量的，具有以下两点特性：" class="headerlink" title="被volatile关键字修饰的变量的，具有以下两点特性："></a>被volatile关键字修饰的变量的，具有以下两点特性：</h2><ol><li>保证了不同线程对该变量操作的内存可见性，不保证原子性。</li><li>禁止指令重排序</li></ol><hr><p>在java的内存模型中，JMM规定对于多个线程共享变量都存在主存中的，每个线程包含自己的工作内存，工作内存保存了主内存共享的变量，<br>其中一个线程要操作这些共享变量，只能通过操作工作内存中的副本来实现，操作完毕之后再同步会主内存中。在其他线程未将共享变量同步<br>会自己的工作内存之前，共享变量的改变对其不可见的。也就是说其他线程的工作内存中的变量已经过时了。</p><p>volatile是通过内存屏障和禁止指令重排序来保证内存可见性的，一个线程对volatile变量的修改，能即刻被其他线程所见，<br>但是不保证原子性。</p><p>使用volatile提供理想的线程安全，需要满足以下两个条件：</p><ol><li>对变量的写操作不依赖于当前值</li><li>该变量没有包含在具有其他变量的不变式中</li></ol><p>volatile变量不能用来做<strong>线程安全的计数器</strong></p><p>volatile的适用场景</p><h2 id="1-状态标志"><a href="#1-状态标志" class="headerlink" title="1. 状态标志"></a>1. 状态标志</h2><p>注意：这种状态标记<strong>通常只有一种状态转换</strong>如果需要状态的来回转换，可以使用原子变量。</p><h2 id="2-一次性安全发布"><a href="#2-一次性安全发布" class="headerlink" title="2. 一次性安全发布"></a>2. 一次性安全发布</h2><h2 id="3-独立观察"><a href="#3-独立观察" class="headerlink" title="3. 独立观察"></a>3. 独立观察</h2><p>定期“发布”观察结果供程序内部使用</p><h2 id="4-“volatile-bean”模式"><a href="#4-“volatile-bean”模式" class="headerlink" title="4. “volatile bean”模式"></a>4. “volatile bean”模式</h2><h2 id="5-开销较低“读-写锁”策略"><a href="#5-开销较低“读-写锁”策略" class="headerlink" title="5. 开销较低“读-写锁”策略"></a>5. 开销较低“读-写锁”策略</h2><hr><ul><li>状态位</li><li>一个线程写，多个线程读的场景</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;被transient关键字修饰的变量不会被序列化&quot;&gt;&lt;a href=&quot;#被transient关键字修饰的变量不会被序列化&quot; class=&quot;headerlink&quot; title=&quot;被transient关键字修饰的变量不会被序列化&quot;&gt;&lt;/a&gt;被transient关键字修
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/10/15/hello-world/"/>
    <id>http://yoursite.com/2018/10/15/hello-world/</id>
    <published>2018-10-15T08:05:35.909Z</published>
    <updated>2018-10-15T08:05:35.909Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringAOP原理</title>
    <link href="http://yoursite.com/2018/10/01/Java/SpringAOP%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/10/01/Java/SpringAOP原理/</id>
    <published>2018-10-01T15:06:32.000Z</published>
    <updated>2018-10-15T10:07:05.461Z</updated>
    
    <content type="html"><![CDATA[<h4 id="AOP（Aspect-OrientedProgramming，面向切面编程），可以说是OOP（Object-Oriented-Programing，面向对象编程）的补充和完善。"><a href="#AOP（Aspect-OrientedProgramming，面向切面编程），可以说是OOP（Object-Oriented-Programing，面向对象编程）的补充和完善。" class="headerlink" title="AOP（Aspect-OrientedProgramming，面向切面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。"></a>AOP（Aspect-OrientedProgramming，面向切面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。</h4><h3 id="AOP使用场景"><a href="#AOP使用场景" class="headerlink" title="AOP使用场景"></a>AOP使用场景</h3><ul><li>权限</li><li>缓存</li><li>内容传递</li><li>错误处理</li><li>懒加载</li><li>调试</li><li>记录跟踪 优化 校准</li><li>持久化</li><li>资源池</li><li>同步</li><li>事务</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;AOP（Aspect-OrientedProgramming，面向切面编程），可以说是OOP（Object-Oriented-Programing，面向对象编程）的补充和完善。&quot;&gt;&lt;a href=&quot;#AOP（Aspect-OrientedProgramming，面
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="AOP" scheme="http://yoursite.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Github 提交代码 Emoji</title>
    <link href="http://yoursite.com/2017/08/09/Git/GithubEmoji/"/>
    <id>http://yoursite.com/2017/08/09/Git/GithubEmoji/</id>
    <published>2017-08-09T15:55:41.000Z</published>
    <updated>2018-10-15T08:05:35.888Z</updated>
    
    <content type="html"><![CDATA[<p>An emoji guide for your commit messages: <a href="https://gitmoji.carloscuesta.me/" target="_blank" rel="noopener">gitmoji</a></p><table><thead><tr><th>Code</th><th>Emoji</th><th>描述</th></tr></thead><tbody><tr><td><code>:art:</code></td><td>:art:</td><td>改进代码的结构/格式</td></tr><tr><td><code>:zap:</code></td><td>:zap:</td><td>提高性能</td></tr><tr><td><code>:fire:</code></td><td>:fire:</td><td>删除代码或文件</td></tr><tr><td><code>:bug:</code></td><td>:bug:</td><td>修复bug</td></tr><tr><td><code>:ambulance:</code></td><td>:ambulance:</td><td>关键修补程序</td></tr><tr><td><code>:sparkles:</code></td><td>:sparkles:</td><td>引入新功能</td></tr><tr><td><code>:memo:</code></td><td>:memo:</td><td>写文档</td></tr><tr><td><code>:rocket:</code></td><td>:rocket:</td><td>部署项目</td></tr><tr><td><code>:lipstick:</code></td><td>:lipstick:</td><td>更新UI和样式文件</td></tr><tr><td><code>:tada:</code></td><td>:tada:</td><td>初始提交</td></tr><tr><td><code>:white_check_mark:</code></td><td>:white_check_mark:</td><td>添加测试</td></tr><tr><td><code>:lock:</code></td><td>:lock:</td><td>解决安全问题</td></tr><tr><td><code>:apple:</code></td><td>:apple:</td><td>修改 macOS 下的一些问题</td></tr><tr><td><code>:penguin:</code></td><td>:penguin:</td><td>修改 Linux 下的一些问题</td></tr><tr><td><code>:checkered_flag:</code></td><td>:checkered_flag:</td><td>修改 Windows 下的一些问题</td></tr><tr><td><code>:robot:</code></td><td>:robot:</td><td>修改 Android 下的一些问题</td></tr><tr><td><code>:green_apple:</code></td><td>:green_apple:</td><td>修改 IOS 下的一些问题</td></tr><tr><td><code>:bookmark:</code></td><td>:bookmark:</td><td>发布版本标签</td></tr><tr><td><code>:rotating_light:</code></td><td>:rotating_light:</td><td>移除 linter 警告</td></tr><tr><td><code>:construction:</code></td><td>:construction:</td><td>工作正在进行中</td></tr><tr><td><code>:green_heart:</code></td><td>:green_heart:</td><td>修复CI构建</td></tr><tr><td><code>:arrow_down:</code></td><td>:arrow_down:</td><td>降级依赖</td></tr><tr><td><code>:arrow_up:</code></td><td>:arrow_up:</td><td>更新依赖</td></tr><tr><td><code>:construction_worker:</code></td><td>:construction_worker:</td><td>添加CI构建系统</td></tr><tr><td><code>:chart_with_upwards_trend:</code></td><td>:chart_with_upwards_trend:</td><td>添加分析或跟踪代码</td></tr><tr><td><code>:hammer:</code></td><td>:hammer:</td><td>重构代码</td></tr><tr><td><code>:heavy_minus_sign:</code></td><td>:heavy_minus_sign:</td><td>删除依赖关系</td></tr><tr><td><code>:whale:</code></td><td>:whale:</td><td>关于Docker的工作</td></tr><tr><td><code>:heavy_plus_sign:</code></td><td>:heavy_plus_sign:</td><td>添加依赖关系</td></tr><tr><td><code>:wrench:</code></td><td>:wrench:</td><td>更改配置文件</td></tr><tr><td><code>:globe_with_meridians:</code></td><td>:globe_with_meridians:</td><td>国际化和本地化</td></tr><tr><td><code>:pencil2:</code></td><td>:pencil2:</td><td>修正打字错误</td></tr><tr><td><code>:hankey:</code></td><td>:hankey:</td><td>编写不好的代码，需要改进</td></tr><tr><td><code>:rewind:</code></td><td>:rewind:</td><td>还原更改</td></tr><tr><td><code>:twisted_rightwards_arrows:</code></td><td>:twisted_rightwards_arrows:</td><td>合并分支</td></tr><tr><td><code>:package:</code></td><td>:package:</td><td>更新已编译的文件或包</td></tr><tr><td><code>:alien:</code></td><td>:alien:</td><td>由于外部API更改而更新代码</td></tr><tr><td><code>:truck:</code></td><td>:truck:</td><td>移动或重命名文件</td></tr><tr><td><code>:page_facing_up:</code></td><td>:page_facing_up:</td><td>添加或更新许可证</td></tr><tr><td><code>:boom:</code></td><td>:boom:</td><td>引入爆炸改变</td></tr><tr><td><code>:bento:</code></td><td>:bento:</td><td>添加或更新资源</td></tr><tr><td><code>:ok_hand:</code></td><td>:ok_hand:</td><td>由于代码审查更改而更新代码</td></tr><tr><td><code>:wheelchair:</code></td><td>:wheelchair:</td><td>改善无障碍</td></tr><tr><td><code>:bulb:</code></td><td>:bulb:</td><td>文档化源代码</td></tr><tr><td><code>:beers:</code></td><td>:beers:</td><td>沉迷写代码</td></tr><tr><td><code>:speech_balloon:</code></td><td>:speech_balloon:</td><td>更新文本和常量</td></tr><tr><td><code>:card_file_box:</code></td><td>:card_file_box:</td><td>执行数据库相关更改</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;An emoji guide for your commit messages: &lt;a href=&quot;https://gitmoji.carloscuesta.me/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gitmoji&lt;/a&gt;&lt;/p&gt;
&lt;table
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
</feed>
